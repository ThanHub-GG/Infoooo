
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local DataService = require(ReplicatedStorage.Modules.DataService)
local DinoMachine_RE = ReplicatedStorage.GameEvents:WaitForChild("DinoMachineService_RE")

local petList = {
    {name_pet = "Dog", rarity = "Common"},
    {name_pet = "Golden Lab", rarity = "Common"},
    {name_pet = "Bunny", rarity = "Common"},
    {name_pet = "Black Bunny", rarity = "Uncommon"},
    {name_pet = "Cat", rarity = "Uncommon"},
    {name_pet = "Orange Tabby", rarity = "Rare"},
    {name_pet = "Silver Monkey", rarity = "Legendary"},
    {name_pet = "Giant Ant", rarity = "Mythical"},
    {name_pet = "Kitsune", rarity = "Prismatic"},
    -- dst ...
}

local function filterPetsByRarity(targetRarity)
    local filteredPets = {}
    for _, pet in ipairs(petList) do
        if pet.rarity:lower() == targetRarity:lower() then
            table.insert(filteredPets, pet.name_pet)
        end
    end
    return filteredPets
end

local function isFilteredPet(toolName, filteredPetNames)
    for _, petName in ipairs(filteredPetNames) do
        if toolName:lower():find(petName:lower()) then
            return true
        end
    end
    return false
end

local function hasPetWithRarity(rarity)
    local filteredPetNames = filterPetsByRarity(rarity)
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and isFilteredPet(tool.Name, filteredPetNames) then
            return true
        end
    end

    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") and isFilteredPet(tool.Name, filteredPetNames) then
            return true
        end
    end

    return false
end

local function getDinoMachineData()
    local playerData = DataService:GetData()
    if playerData then
        return playerData.DinoMachine
    end
    return nil
end

local function autoEquipAndTrade(targetRarity)
    print("[AutoDino] Equip & trade pets with rarity:", targetRarity)
    local filteredPetNames = filterPetsByRarity(targetRarity)
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and isFilteredPet(tool.Name, filteredPetNames) then
            tool.Parent = character
            print("[AutoDino] Equipped pet:", tool.Name)
        end
    end

    DinoMachine_RE:FireServer("MachineInteract")

    while true do
        local dinoData = getDinoMachineData()
        if dinoData and not dinoData.IsRunning then
            print("[AutoDino] Trade selesai")
            break
        end
        task.wait(1)
    end
end

local function autoClaim()
    print("[AutoDino] Claim reward jika tersedia")
    local dinoData = getDinoMachineData()
    if dinoData and dinoData.RewardReady then
        pcall(function()
            DinoMachine_RE:FireServer("ClaimReward")
        end)
        print("[AutoDino] Reward claimed")
    end
end

local function autoRejoin()
    print("[AutoDino] Rejoin server...")
    local success, err = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)
    if not success then
        warn("[AutoDino] Gagal rejoin:", err)
    end
end

local function startAutoDinoLoop()
    if not getgenv().target_rarity or getgenv().target_rarity == "" then
        warn("[AutoDino] target_rarity belum diset di getgenv()")
        return
    end

    getgenv().auto_dino = true

    while getgenv().auto_dino do
        if not hasPetWithRarity(getgenv().target_rarity) then
            warn("[AutoDino] Pet rarity '" .. getgenv().target_rarity .. "' tidak ditemukan, berhenti.")
            getgenv().auto_dino = false
            break
        end

        autoEquipAndTrade(getgenv().target_rarity)

        task.wait(2)

        autoRejoin()

        -- Tunggu setelah rejoin (waktu bisa disesuaikan)
        task.wait(1)

        autoClaim()

        -- Tunggu sebelum loop berikutnya (bisa disesuaikan)
        task.wait(3)
    end
end

-- Contoh set dan start:
-- getgenv().target_rarity = "Rare"
startAutoDinoLoop()
